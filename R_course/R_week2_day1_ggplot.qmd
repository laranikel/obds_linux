---
title: "Solution: ggplot2"
author: "Kevin Rue-Albrecht"
date: "14/10/2024"
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(patchwork)
library(gridExtra)
```

if a function of one package is overwriten by the function of another package, to use original package function use: originalPackage::function()

# Exercise

Use `library(ggplot2)` to load the package.

```{r}
library(ggplot2)
```

## Specify the dataset.

What does `ggplot(diamonds)` do?

```{r}
ggplot(data = diamonds, mapping = aes(x = x, y = y))

```

> Answer:

## Add the aesthetics.

What does `ggplot(diamonds, aes(x = carat, y = price))` do?

```{r}
ggplot() + geom_point(data = diamonds, mapping = aes(x = carat, y = price))
```

> Answer:

## Add geometric objects

- Add data points showing `carat` on the x-axis and `price` on the y-axis.

```{r}
ggplot(diamonds, aes(x = carat, y = price))
  
```

- Color data points by `cut`.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut)) + geom_point()
  
```

- Add a smoothed mean trend line.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut)) + geom_point() + geom_smooth()


```

- Assign that last plot to an object called `obds_diamonds`.

```{r}
obds_diamonds <- ggplot(data = diamonds, mapping = aes(x = carat, y = price, colour = cut)) + geom_point() + geom_smooth()


```


# Exercise

Predict the difference between these two plots

### Plot 1

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) +
  geom_point() +
  geom_smooth()
```

### Plot 2

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(colour = cut)) +
  geom_smooth()
```

> Answer:

# Exercise

## Trend lines

Using the `ChickWeight` data set:

- Create a scatter plot of weight (y-axis) over time (x-axis).

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight)) + geom_point()

```

- Color by diet.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point()

```

- Add a linear mean trend line for each diet.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point() + geom_smooth(method = "lm", formula = y ~ x)

```

At this point you should be able to visually identify
the diet that leads to the highest mean increase in weight.

> Answer:

- Facet a ribbon of sub-plots, one per diet.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point() + geom_smooth() + facet_wrap(~Diet, nrow = 2)


```

- Assign that last plot to an object called `obds_chickweight`.

```{r}

obds_chickweight <- ggplot(ChickWeight, aes(x = Time, y = weight, colour = Diet)) + geom_point() + geom_smooth() + facet_wrap(~Diet, nrow = 2)


```

# Exercise

## Bar plot

- Load the `ggplot2::msleep` data set.

```{r}
data("msleep")

```

- Draw a bar plot of number of observations (i.e., rows) for each taxonomic order
  (i.e, one plot and one bar per taxonomic order).

```{r}
ggplot(data = msleep, aes(x = order)) + geom_bar() + theme( axis.text.x = element_text(size = 5, angle = 90))

```

- Change the angle and font size of the text for the x-axis ticks (not the axis titles).
  Justify the text of those x-axis ticks as right-aligned.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(data = msleep, aes(x = order)) + geom_bar() + theme( axis.text.x = element_text(size = 9, angle = 90, hjust = 1))



```

- Change the value and font size of the title for both x and y axes.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(data = msleep, aes(x = order)) + geom_bar() + theme(axis.title = element_text(size = 12), axis.text.x = element_text(size = 9, angle = 90, hjust = 1), axis.ticks = element_line(size = 1)) + labs(x = "Taxonomic order", y = "Counts")




```

- Fill each bar with colors, proportionally to the count of each genus.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(data = msleep, aes(x = order, colour = genus)) + 
  geom_bar() + 
  theme(axis.title = element_text(size = 12), axis.text.x = element_text(size = 9, angle = 90, hjust = 1), axis.ticks = element_line(size = 1), legend.text = element_text(size = 6), legend.key.size = unit(0.1, "line")) + 
  labs(x = "Taxonomic order", y = "Counts")





```

From this point onwards, you may need to iteratively resize the text of the ticks and axes for readability.

- Reduce the legend key size.
  (Recommendation: use `unit(2, "mm")`).
  (Copy-paste and extend the code chunk above.)

```{r}








```

- Force the legend to be display in 3 columns.
  (Recommendation: use `guide_legend(...)`).
  (Copy-paste and extend the code chunk above.)

```{r}


ggplot(data = msleep, aes(x = order, fill = genus)) + 
  geom_bar() + 
  theme(axis.title = element_text(size = 12), axis.text.x = element_text(size = 9, angle = 90, hjust = 1), axis.ticks = element_line(size = 1), legend.text = element_text(size = 6), legend.key.size = unit(1, "line")) + 
  labs(x = "Taxonomic order", y = "Counts") + guides(fill=guide_legend(ncol=3))








```

- Add a contour of thin black lines to the bars.

```{r}


ggplot(data = msleep, aes(x = order, fill = genus)) + 
  geom_bar(colour = "black") + 
  theme(axis.title = element_text(size = 12), axis.text.x = element_text(size = 9, angle = 90, hjust = 1), axis.ticks = element_line(size = 1), legend.text = element_text(size = 6), legend.key.size = unit(1, "line")) + 
  labs(x = "Taxonomic order", y = "Counts") + guides(fill=guide_legend(ncol=3)) +
  scale_fill_ordinal()

# scale_fill for different coulour schemes 






```

- Assign that last plot to an object called `obds_msleep`.

```{r}


obds_msleep <- ggplot(data = msleep, aes(x = order, fill = genus)) + 
  geom_bar(colour = "black") + 
  theme(axis.title = element_text(size = 12), axis.text.x = element_text(size = 9, angle = 90, hjust = 1), axis.ticks = element_line(size = 1), legend.text = element_text(size = 6), legend.key.size = unit(0.1, "line")) + 
  labs(x = "Taxonomic order", y = "Counts") + 
  guides(fill=guide_legend(ncol=3))








```

# Exercise

## Plotting grid

- Collate the plots that we assigend to objects through the day, as a single plot.

  + Plots: `obds_diamonds`, `obds_chickweight`, `obds_msleep`.
  
  + Methods: `cowplot::plot_grid()`, `patchwork`, `gridExtra::grid.arrange()`.

Using `cowplot`.

```{r}
#| fig-width: 20
#| fig-height: 20
library(cowplot)
first_row <- cowplot::plot_grid(obds_diamonds, obds_chickweight, nrow = 1, rel_widths = c(2,1))
second_row <- cowplot::plot_grid(obds_msleep)
super_plot <- cowplot::plot_grid(first_row, second_row, labels= c("A", "B"), nrow = 2, align = "hv")



super_plot


```

Using `patchwork`.

```{r}
#| fig-width: 12
#| fig-height: 12
library(patchwork)

superplot_patchwork <- obds_diamonds / (obds_chickweight + obds_msleep) + plot_layout(guides = "collect")
superplot_patchwork


```

Using `gridExtra`.

```{r}
#| fig-width: 20
#| fig-height: 20
library(gridExtra)

gridExtra::grid.arrange(obds_diamonds, obds_chickweight, obds_msleep, nrow = 2)



```

- Export the new plot in a PDF file, and open it in a PDF viewer (e.g. Adobe Acrobat Reader DC).

You will likely need a few attempts to fine-tune the width and height of the output file.

```{r}
ggsave("ggplot2_example.pdf", plot = super_plot)

ggsave("ggplot2_Patchwork_plot.pdf", plot = superplot_patchwork)

```

# Exercise

## Pair programming

- Explore the data set `ggplot2::mpg` and generate the most informative plot that you can!

```{r}

data("mpg")


```
