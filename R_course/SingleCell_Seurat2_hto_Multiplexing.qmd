---
title: "Template: Single-cell analysis using Seurat, part 2 (HTO)"
author: "Kevin Rue-Albrecht (modified by Lucy Garner)"
date: "2025-05-30"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false
library(Seurat)
library(tidyverse)
```

## Goal

Demultiplexing with hashtag oligos (HTOs).

- Single cells collected from four cell lines: HEK, K562, KG1 and THP1.
- Each cell line was further split into three samples (12 samples in total).
- Each sample was labelled with a hashing antibody mixture (CD29 and CD45), pooled, and run on a single channel of 10x.
- Based on this design, we should be able to detect doublets both across and within cell types.

## Exercise

### Read in the HTO and UMI matrices

Import the UMI data from the file `hto12_umi_mtx.rds` and check its class. Name the object `umi_data`.

```{r}
umi_data <- readRDS("/project/shared/r/2_r_single_cell/2-seurat/hto12_umi_mtx.rds")
```

Check its dimensions.

```{r}
dim(umi_data)
```

Import the HTO data from the file `hto12_hto_mtx.rds` and check its class. Name the object `hto_data`.

```{r}
hto_data <- readRDS("/project/shared/r/2_r_single_cell/2-seurat/hto12_hto_mtx.rds")
```

Check its dimensions.

```{r}
dim(hto_data)
```

### Cleanup

Subset the HTO data frame to only include barcodes present in the UMI matrix.

**Hint:**

- Create a character vector that is the intersection of barcodes in the UMI matrix and HTO data frame. Name the object `joint_barcodes`.
- We will use that character vector to subset to UMI matrix and HTO data sets in downstream steps.

```{r}
joint_barcodes <- intersect(
  colnames(umi_data), rownames(hto_data))

length(joint_barcodes)
```

Subset the UMI matrix to include only the joint barcodes, and check the dimensions of the output matrix. Name the object `umi_data_common`.

```{r}
umi_data_common <- umi_data[ , joint_barcodes]
```

### Seurat

Create a Seurat object from the UMI count matrix made of the common barcodes.

**Hint:**

- Include only features detected in at least three cells.
- Include only cells with at least 200 features detected.
- Name the object `seurat_citeseq`.

```{r}
seurat_citeseq <- CreateSeuratObject(counts = umi_data_common,
                                    assay = "RNA",
                                    min.cells = 3,
                                    min.features = 200)
seurat_citeseq
```



> The `dgTMatrix` class represents sparse matrices in triplet format:
> - `i`, the row
> - `j`, the column
> - `x`, the value
> 
> The `dgCMatrix`class represents sparse matrices in compressed column format:
> This format stores column-oriented  data structures.
> It is more efficient for matrices with more non-zero elements,
> especially when operations involve columns.

### Preprocessing

Apply the sequence of functions `NormalizeData()`, `FindVariableFeatures()`, and `ScaleData()`.

**Hint:**

- Use the selection method "vst" to find variable features.
- Scale data only for the variable features.

```{r}
seurat_citeseq[["percent.mt"]] <- PercentageFeatureSet(seurat_citeseq, pattern = "^MT-")

seurat_citeseq <- NormalizeData(seurat_citeseq, normalization.method = "LogNormalize")

seurat_citeseq <- FindVariableFeatures(seurat_citeseq, selection.method = "vst", nfeatures = 2000)

head(VariableFeatures(seurat_citeseq), 10)


seurat_citeseq <- ScaleData(seurat_citeseq, vars.to.regress = "percent.mt")
```

### Add HTO assay

- First, subset the HTO data to barcodes that are now present in the Seurat object.
- Furthermore, subset the features only to HTO tags.
- Lastly, transpose the data so that HTO tags are rows and barcodes are columns.
- Name the object `hto_data_common`.

```{r}
hto_data_common <- hto_data[colnames(seurat_citeseq), 1:12]
hto_data_common <- t(hto_data_common)

```

- Use the function `CreateAssayObject()` to add the HTO data made of the common barcodes as a new assay the Seurat object created earlier.
- Display the updated Seurat object.

**Hint:**

- Add the HTO assay under the name "HTO".

```{r}
seurat_citeseq[["HTO"]] <- CreateAssayObject(counts = hto_data_common, key = "HTO")
seurat_citeseq
```

### Normalise the HTO assay

Use `NormalizeData()` to apply the CLR (centered log ratio) transformation to the HTO assay.

**Hint:**

- Set the default assay to "HTO" prior to running `NormalizeData()`.
- Set the argument `margin = 1`.

```{r}

DefaultAssay(seurat_citeseq) <- "HTO"

DefaultAssay(seurat_citeseq)

seurat_citeseq <- NormalizeData(object = seurat_citeseq, normalization.method = "CLR", margin = 1)
```

**Why is the CLR transformation preferred for HTO data?**

> Answer:  
> 
> 

### Demultiplex data using HTO

Use the function `HTODemux()` to estimate the original sample of each cell.

**Hint:**

- Set the argument `positive.quantile = ` to a probability of 0.99.

```{r}
seurat_citeseq <- HTODemux(object = seurat_citeseq, assay = "HTO", positive.quantile = 0.99)
```

### Inspect demultiplexing outputs

Display and interpret the cell metadata of the Seurat object.

```{r}
colnames(seurat_citeseq[[]])

head(seurat_citeseq[[]])
```

Use the `table()` function to tabulate the number of barcodes classified as doublet, negative, and singlet.

```{r}
table(
  seurat_citeseq$HTO_classification.global
)
```

Use the function `RidgePlot()` to visualise the distribution of signal for each HTO tag in each sample.

**Hint:**

- To group cells by their assigned sample, set the identity of cells to the "HTO_maxID" (HTO tag with maximum signal).
- To keep the plot simple, pick one HTO tag used to label one sample of each cell line.

```{r, fig.height = 8, fig.width = 10}
Idents(seurat_citeseq) <- "HTO_maxID"

RidgePlot(object = seurat_citeseq, assay = "HTO", features = c("HEK-A", "THP1-A", "K562-A", "KG1-A"), ncol = 2 )

```

Use the function `FeatureScatter()` to visualise the signal of two different HTO tags for each cell.

**Hint:**

- Set the default assay to "HTO", to make sure that values from that assay are used in the plot.
- Use the `group.by = ` argument to control the metadata used to colour barcodes.
- Set the arguments `span = FALSE, smooth = FALSE, shuffle = TRUE`. Look at the help page to explain why those values are desirable.

```{r}

```

Use the function `VlnPlot()` to visualise the distribution of metadata (e.g., "nCount_RNA") in predicted doublets, negative, and singlets.

**Hint:**

- Set the identity of cells to "HTO_classification.global" to control the grouping of cells in the plot.
- Consider arguments such as `pt.size = `, `log = `, and `split.by = ` to make the plot more informative.

```{r}

```

Use the function `HTOHeatmap()` to visualise the signal of each HTO tag in each barcode.

```{r}
#| fig-height: 8

```

**How do interpret this heatmap?**

> Answer:  
> 
> 

### Proceed with single cells

Remove negative and doublet barcodes. Name the new Seurat object `seurat_citeseq_singlets`.

```{r}

```

Produce a UMAP based on the RNA assay, coloured by the cell line of the sample based on the HTO assay.

**Hint:**

- Use 12 PCs.
- Make a new column of metadata identifying the cell line for each cell. Name the column "cell_line". Use `str_replace` to modify the values in the "HTO_classification" column.

```{r}

```

```{r}
sessionInfo()
```
